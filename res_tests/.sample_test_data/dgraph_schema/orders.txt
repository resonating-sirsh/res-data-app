
type test_order {
    id: Int!
    admin_graphql_api_id: String
    app_id: Int
    browser_ip: String
    buyer_accepts_marketing: Boolean
    cancel_reason: String
    cancelled_at: DateTime
    cart_token: String
    checkout_id: Int
    checkout_token: String
    closed_at: DateTime
    confirmed: Boolean
    contact_email: String
    created_at: DateTime
    currency: String
    current_subtotal_price: Float
    current_subtotal_price_set: String
    current_total_discounts: Float
    current_total_discounts_set: String
    current_total_duties_set: String
    current_total_price: Float
    current_total_price_set: String
    current_total_tax: Float
    current_total_tax_set: String
    customer_locale: String
    device_id: Int
    discount_codes: String
    email: String
    financial_status: String
    fulfillment_status: String
    gateway: String
    landing_site: String
    landing_site_ref: String
    location_id: Int
    name: String
    note: String
    note_attributes: String
    number: Int
    order_number: Int
    order_status_url: String
    original_total_duties_set: Float
    payment_gateway_names: String
    phone: Float
    presentment_currency: String
    processed_at: DateTime
    processing_method: String
    reference: String
    referring_site: String
    source_identifier: Int
    source_name: String
    source_url: Float
    subtotal_price: Float
    subtotal_price_set: String
    tags: String
    tax_lines: String
    taxes_included: Boolean
    test: Boolean
    token: String
    total_discounts: Float
    total_discounts_set: String
    total_line_items_price: Float
    total_line_items_price_set: String
    total_outstanding: Float
    total_price: Float
    total_price_set: String
    total_price_usd: Float
    total_shipping_price_set: String
    total_tax: Float
    total_tax_set: String
    total_tip_received: Float
    total_weight: Float
    updated_at: DateTime
    user_id: Int
    billing_address: String
    customer: String
    discount_applications: String
    fulfillments: String
    line_items: [test_order_line_items!
    ] @hasInverse(field: order)
    refunds: String
    shipping_address: String
    shipping_lines: String
    brand: String
    type: String
    client_details: String
    payment_details: String
}

type test_order_line_items {
    id: Int!
    admin_graphql_api_id: String
    fulfillable_quantity: Int
    fulfillment_service: String
    fulfillment_status: String
    gift_card: Boolean
    grams: Int
    name: String
    pre_tax_price: String
    pre_tax_price_set: String
    price: String
    price_set: String
    product_exists: Boolean
    product_id: Int
    properties: String
    quantity: Int
    requires_shipping: Boolean
    sku: String
    taxable: Boolean
    title: String
    total_discount: String
    total_discount_set: String
    variant_id: Int
    variant_inventory_management: String
    variant_title: String
    vendor: String
    tax_lines: String
    duties: String
    discount_allocations: String
    origin_location: String
    destination_location: String
    tax_code: String
    tip: String
    tip_payment_gateway: String
    tip_payment_method: String
    order: test_order
}