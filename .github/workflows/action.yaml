name: ci

on:
  push:
    branches:
      - main
    paths:
      - "apps/**"
      - "res/**"
  pull_request:
    branches:
      - main
    paths:
      - "apps/**"
      - "res/**"
jobs:
  build-core:
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.get-changed-apps.apps }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # - # Add support for more platforms with QEMU (optional)
      #   # https://github.com/docker/setup-qemu-action
      #   name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3
      # - name: Git branch name
      #   id: git-branch-name
      #   uses: EthanSK/git-branch-name-action@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Get changed Apps
        id: get-changed-apps
        run: echo "apps={\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}" >> $GITHUB_OUTPUT

        # |
        #   app_list=$(git diff --name-only origin/main  | grep '^apps/' | awk -F/ '{print $1 "/" $2 "/" $3}' | sort -u | jq -R -s 'split("\n") | map(select(. != ""))' )

        #   set -eux
        #   DATA=$(echo ${{ steps.changed-files-specific.outputs.all_changed_files }} | jq -c '. | map(split("/")[0]) | unique')
        #   echo "matrix=$DATA" >> "$GITHUB_OUTPUT"

      #echo "::set-output name=apps::$app_list"
      # - name: Setup Python env
      #   uses: actions/setup-python@v3
      # - name: Install black
      #   run: pip install black

      # - name: Black changed files
      #   run: |
      #     black --check  ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      # #https://medium.com/@int128/effective-buildkit-cache-in-github-actions-e36d08804ffb
      # #https://docs.docker.com/build/cache/backends/
      # - name: Build and push container image to registry
      #   run: |
      #     docker buildx build --push -f ./res/docker/res-data/Dockerfile -t 286292902993.dkr.ecr.us-east-1.amazonaws.com/res-data:app-latest  \
      #     --cache-to mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=286292902993.dkr.ecr.us-east-1.amazonaws.com/res-data:app-cache \
      #     --cache-from type=registry,ref=286292902993.dkr.ecr.us-east-1.amazonaws.com/res-data:app-cache .

  process-directory:
    needs: build-core
    runs-on: ubuntu-latest
    if: ${{ needs.build-core.outputs.apps != '[]' && needs.build-core.outputs.apps != '' }}
    strategy:
      matrix:
        app: ${{fromJson(needs.build-core.outputs.apps)}}
    steps:
      - name: Process app ${{ matrix.app }}
        run: |
          echo "Processing directory: ${{ matrix.app }}"

#build the main docker image with caching after running tests
#if apps have changed, also build the docker under their folder
#then call the infra repo to update its image tag and argo will do the rest since we will one time setup the applications
#later we can add DB migrations and but we probably will discontinue them and switch to postgres migration and schema from pydantic types

# app_list=$(git diff --name-only origin/main  | grep '^apps/' | awk -F/ '{print $1 "/" $2 "/" $3}' | sort -u | jq -R -s 'split("\n") | map(select(. != ""))' )
# a=$($app_list | jq -r 'join(",")')

#git diff --name-only origin/main  | grep '^apps/' | awk -F/ '{print $1 "/" $2 "/" $3}' | sort -u | jq -R -s 'split("\n") | map(select(. != ""))' | jq -cR '.' | sed 's/"/\\"/g'
#https://stackoverflow.com/questions/59977364/github-actions-how-use-strategy-matrix-with-script
